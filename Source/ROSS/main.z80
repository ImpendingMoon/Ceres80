;******************************************************************************
; main.z80
; Contains the code for system startup, ISR, and syscall handler
; Contains labels for reserved memory
;******************************************************************************

    INCLUDE "constants.z80"

    ORG $0000
JP main

    DS $0008-$
    ORG $0008
call_handler:
    PUSH DE
    PUSH HL

    ; Index into call table
    ADD A                               ; Each entry is 2 bytes, double A
    LD E, A                             ; Move to 16-bit register for adding
    LD D, 0
    LD HL, call_table
    ADD HL, DE                          ; HL now points to function address

    ; Load function address
    LD E, (HL)                          ; Load function address into DE
    INC HL
    LD D, (HL)

    LD IY, 0                            ; Move function address into IY
    ADD IY, DE

    ; Restore parameters and jump to function
    POP HL
    POP DE
    JP (IY)



    DS $0038-$
    ORG $0038
isr:
    EI
    RETI

main:
    ; Set stack top
    LD SP, stack_top

    ; Clear system memory
    LD HL, system_memory
    LD DE, system_memory+1
    LD BC, $FFFF-system_memory-1
    LD (HL), 0
    LDIR

    ; Init CTC
    LD A, CTC_CMD
    OUT (CTC_CH0), A
    LD A, CTC_TC
    OUT (CTC_CH0), A

    ; Enable interrupts
    IM 1
    EI

    HALT
    JR main



    INCLUDE "math.s"



    ORG $8000
program_memory:

    ORG $F97F
stack_top:

    ORG $F980
system_memory:

system_uptime: DS 4
rng_state: DS 4
button_state: DS 1

    ORG $FA00
io_buffer:

    ORG $FC00
framebuffer:
